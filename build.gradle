apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'

group = "de.martido"
version = "0.1-SNAPSHOT"

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
  mavenCentral()
  flatDir name: 'localRepository', dirs: 'lib'
}

configurations {
  jarjar
}

dependencies {
  compile(group: 'org.apache.ant', name: 'ant', version: '1.8.2') {
    exclude(group: 'org.apache.ant', module: 'ant-launcher')
  }
  compile(group: 'com.sun.codemodel', name: 'codemodel', version: '2.4')
  compile(group: 'org.antlr', name: 'stringtemplate', version: '3.2.1')
  compile(group: 'org.apache.velocity', name: 'velocity', version: '1.7') {
    exclude(group: 'oro', module: 'oro')
  }
  testCompile(group: 'junit', name: 'junit', version: '4.8.2')
  jarjar name: 'jarjar', version: '1.1'
}

task createWrapper(type: Wrapper) {
  gradleVersion = "1.0-milestone-4"
}

task testPrepare {
  description = ""
} << {
  dir = new File("src/test/generated")
  if(dir.exists()) {
    dir.eachDir {
      println "Deleting directory '${it.path}'"
      delete(it)
    }
  }
  else {
    dir.mkdirs()
  }
}

test {
  dependsOn testPrepare
}

task sourcesJar(type: Jar, dependsOn:classes) { 
  description = "Creates a JAR containing all main sources."
  classifier = 'sources' 
  from sourceSets.main.allSource 
}

if(hasProperty('org')) {
  task repackageJar(type: Jar, dependsOn: classes) {
    description = "Repackage Genny; the new base package must be specified via -Porg=<package>."
    classifier = "${org}"
    from sourceSets.main.output.classesDir
  } << {
    ant {
      taskdef(name: "jarjar",
          classname: "com.tonicsystems.jarjar.JarJarTask",
          classpath: configurations.jarjar.asPath)
      
      jarjar(jarfile: archivePath, update: true) {
        fileset dir: sourceSets.main.output.classesDir
        rule pattern: "de.martido.**", result: "${org}.@1"
      }
    }
  }
}

task release(dependsOn: build) {
  description = "Releases the library."
} << { 
  println "Releasing ..."
}

// Add the sources JAR artifcat to the archives configuration.
artifacts {
  archives sourcesJar
}

// Configure the Maven 'install' task: Don't add the 'compile' configuration to the generated POM.
// (Taken from the Gradle docs) 
install {
  repositories {
    mavenInstaller {
      pom.scopeMappings.mappings.remove(configurations.compile)
    }
  }
}

eclipseClasspath {
  dependsOn cleanEclipseClasspath
}
